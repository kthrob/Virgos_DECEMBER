---
import { Icon } from 'astro-icon';
import Logo from '~/components/atoms/Logo.astro';
import { getHomePermalink, getBlogPermalink, getPermalink, getRelativeLink } from '~/utils/permalinks';
import ToggleTheme from '~/components/core/ThemeSwitcher.astro';

const navItems = [
	{ title: 'Features', url: '#features' },
	{ title: 'Compatibility', url: '#compatibility' },
	{ title: 'Showcase', url: '#showcase' },
];
---

<header
	id="page-header"
	class="absolute bottom-0 z-20 flex w-full items-center justify-between border-b border-default px-8 py-4 text-default"
>
	<!-- <h1 class="sr-only">Astro</h1>
    <Icon name="logomark" class="h-10" />
    <Icon name="wordmark" class="hidden h-4 sm:block" /> -->
	<Logo />
	<div>
		<div class="flex items-center gap-6">
			<nav class="hidden sm:block">
				<ul class="flex items-center gap-6">
					{
						navItems.map(({ title, url }) => (
							<li>
								<a class="text-sm" href={url}>
									{title}
								</a>
							</li>
						))
					}
				</ul>
			</nav>
			<ToggleTheme />
			<button id="open-nav-button" type="button" class="btn sm:hidden" aria-label="Navigation">
				<Icon pack="mdi" name="menu" class="h-8" />
			</button>
		</div>
		<div id="menu-modal" class="modal hidden" aria-hidden="true">
			<div class="fixed inset-0 bg-default px-8 py-4">
				<div class="space-y-4" role="dialog" aria-modal="true">
					<div class="text-right">
						<button id="close-nav-button" type="button" class="btn" aria-label="Close navigation">
							<Icon pack="mdi" name="close" class="h-8" />
						</button>
					</div>
					<div class="flex justify-center">
						<Icon name="logomark" class="h-16" />
					</div>
					<nav>
						<ul class="flex flex-col">
							{
								navItems.map(({ title, url }) => (
									<li>
										<a class="block py-4 text-center text-xl" href={url}>
											{title}
										</a>
									</li>
								))
							}
						</ul>
					</nav>
				</div>
			</div>
		</div>
	</div>
</header>

<script>
	import MicroModal from 'micromodal';
	import invariant from 'tiny-invariant';

	const menuModalId = 'menu-modal';

	const header = document.querySelector('#page-header') as HTMLElement;
	const page = document.documentElement;
	const menu = document.querySelector(`#${menuModalId} ul`);
	const openNavButton = document.querySelector('#open-nav-button');
	const closeNavButton = document.querySelector('#close-nav-button');

	function headerAtTop() {
		const d = page.clientHeight - page.scrollTop - header.offsetHeight;
		return d < 0;
	}

	invariant(header, 'header should not be null');
	invariant(menu, 'menu should not be null');
	invariant(openNavButton, 'openNavButton should not be null');
	invariant(closeNavButton, 'closeNavButton should not be null');

	const openMenu = () => {
		MicroModal.show(menuModalId, { disableScroll: true });
		if (headerAtTop()) {
			header.classList.remove('backdrop-blur-md');
		}
	};

	const closeMenu = () => {
		MicroModal.close(menuModalId);
		if (headerAtTop()) {
			header.classList.add('backdrop-blur-md');
		}
	};

	openNavButton.addEventListener('click', openMenu);
	closeNavButton.addEventListener('click', closeMenu);

	document.addEventListener('scroll', () => {
		header.classList.toggle('fixed-header', headerAtTop());
		if (headerAtTop()) {
			header.classList.add('backdrop-blur-md', 'bg-default-glass');
		} else {
			header.classList.remove('backdrop-blur-md', 'bg-default-glass');
		}
	});

	menu.addEventListener('click', (event) => {
		if ((event.target as HTMLElement).tagName === 'A') {
			closeMenu();
		}
	});
</script>

<noscript>
	<style>
		#open-nav-button {
			display: none;
		}
	</style>
</noscript>

<style>
	.fixed-header {
		@apply fixed top-0 bottom-auto;
	}
	.modal.is-open {
		@apply block;
	}
</style>
