---
import { Icon } from 'astro-icon';
import Logo from '~/components/atoms/Logo.astro';
import { getHomePermalink, getBlogPermalink, getPermalink, getRelativeLink } from '~/utils/permalinks';
import ToggleTheme from '~/components/core/ThemeSwitcher.astro';

import type { NavLink, IconLink } from '~/types';

export interface Props {
	globalLinks: Array<NavLink>;
	socialLinks: Array<IconLink>;
}

const { globalLinks, socialLinks } = Astro.props;
---

<!-- <header
	id="page-header"
	aria-label="page navigation"
	class="absolute bottom-0 z-20 flex w-full items-center justify-between border-b border-default px-8 py-1 text-default"
> -->
<nav
	class="sticky top-0 z-40 flex w-full items-center border-b border-default bg-secondary text-primary backdrop-blur-xl"
	id="header"
>
	<div class="w-full flex py-1 px-4">
		<div class="max-w-screen-lg mx-auto flex w-full">
			<ul class="flex items-center justify-between w-full px-2">
				<li class="p-1 flex flex-col items-center">
					<a href={getHomePermalink()} title="home button" aria-label="Home">
						<Icon name="logomark" class="w-6 h-6" />
					</a>
				</li>
				{
					globalLinks.map(({ title, url }) => (
						<li class="p-1 flex flex-col items-center">
							<a class="text-xs" href={url}>
								{title}
							</a>
						</li>
					))
				}
				<li class="p-1 flex items-center">
					<ul class="flex items-center justify-between">
						{
							socialLinks.map(({ title, url, desc, icon }) => (
								<li class="p-1 flex flex-col items-center">
									<a href={url} title={title} aria-label={desc}>
										<Icon name={icon} class="w-6 h-6" />
									</a>
								</li>
							))
						}
					</ul>
				</li>
			</ul>
			<!-- MODAL  -->
			<div id="menu-modal" class="modal hidden" aria-hidden="true">
				<div class="fixed inset-0 bg-default px-8 py-4">
					<div class="space-y-4" role="dialog" aria-modal="true">
						<div class="text-right">
							<button id="close-nav-button" type="button" class="btn" aria-label="Close navigation">
								<Icon pack="mdi" name="close" class="h-8" />
							</button>
						</div>
						<div class="flex justify-center">
							<Icon name="logomark" class="h-16" />
						</div>
						<ul class="flex flex-col">
							{
								globalLinks.map(({ title, url }) => (
									<li>
										<a class="block py-4 text-center text-xl" href={url}>
											{title}
										</a>
									</li>
								))
							}
						</ul>
					</div>
				</div>
			</div>
			<!-- END MODAL -->
		</div>
	</div>
</nav>

<script>
	import MicroModal from 'micromodal';
	import invariant from 'tiny-invariant';

	const menuModalId = 'menu-modal';

	const header = document.querySelector('#page-header') as HTMLElement;
	const page = document.documentElement;
	const menu = document.querySelector(`#${menuModalId} ul`);
	const openNavButton = document.querySelector('#open-nav-button');
	const closeNavButton = document.querySelector('#close-nav-button');

	function headerAtTop() {
		const d = page.clientHeight - page.scrollTop - header.offsetHeight;
		return d < 0;
	}

	invariant(header, 'header should not be null');
	invariant(menu, 'menu should not be null');
	invariant(openNavButton, 'openNavButton should not be null');
	invariant(closeNavButton, 'closeNavButton should not be null');

	const openMenu = () => {
		MicroModal.show(menuModalId, { disableScroll: true });
		if (headerAtTop()) {
			header.classList.remove('backdrop-blur-md');
		}
	};

	const closeMenu = () => {
		MicroModal.close(menuModalId);
		if (headerAtTop()) {
			header.classList.add('backdrop-blur-md');
		}
	};

	openNavButton.addEventListener('click', openMenu);
	closeNavButton.addEventListener('click', closeMenu);

	document.addEventListener('scroll', () => {
		header.classList.toggle('fixed-header', headerAtTop());
		if (headerAtTop()) {
			header.classList.add('backdrop-blur-md', 'bg-default-glass');
		} else {
			header.classList.remove('backdrop-blur-md', 'bg-default-glass');
		}
	});

	menu.addEventListener('click', (event) => {
		if ((event.target as HTMLElement).tagName === 'A') {
			closeMenu();
		}
	});
</script>

<noscript>
	<style>
		#open-nav-button {
			display: none;
		}
	</style>
</noscript>

<style>
	.fixed-header {
		@apply fixed top-0 bottom-auto;
	}
	.modal.is-open {
		@apply block;
	}
</style>
